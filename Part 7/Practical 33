class SumTask implements Runnable
{
        private final int start;
        private final int end;
        private long partialSum;

        public SumTask(int start, int end) {
            this.start = start;
            this.end = end;
            this.partialSum = 0;
        }

        @Override
        public void run() {
            for (int i = start; i <= end; i++) {
                partialSum += i;
            }
        }

        public long getPartialSum() {
            return partialSum;
        }
    }

    public class p33 {
        public static void main(String[] args) {
            if (args.length < 2) {
                System.out.println("Please provide N and number of threads as arguments.");
                return;
            }

            int N = Integer.parseInt(args[0]);
            int numThreads = Integer.parseInt(args[1]);

            if (numThreads > N) {
                numThreads = N;
            }

            SumTask[] tasks = new SumTask[numThreads];
            Thread[] threads = new Thread[numThreads];

            int range = N / numThreads;
            int remainder = N % numThreads;

            int start = 1;
            for (int i = 0; i < numThreads; i++) {
                int end = start + range - 1;
                if (i == numThreads - 1) {
                    end += remainder;
                }

                tasks[i] = new SumTask(start, end);
                threads[i] = new Thread(tasks[i]);
                threads[i].start();

                start = end + 1;
            }
            
            long totalSum = 0;
            try {
                for (int i = 0; i < numThreads; i++) {
                    threads[i].join();
                    totalSum += tasks[i].getPartialSum();
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            System.out.println("Sum of numbers from 1 to " + N + " is: " + totalSum);
        }
    }
